%!PS

% Implementation of Brainfuck interpreter in PostScript.
%
% Copyright (c) 2013 Mike Williams <mrmrdubya@gmail.com>
%
% Permission to use, copy, modify, and distribute this software for any
% purpose with or without fee is hereby granted, provided that the above
% copyright notice and this permission notice appear in all copies.
%
% THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
% WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
% MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
% ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
% WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
% ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
% OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
%

% Return jump stack implemented with an array with the top at the start.
% filepos stack-arr push-jump stack-arr'
/push-jump { aload length 1 add array astore } bind def
% stack-arr pop-jump stack-arr'
/pop-jump { dup 1 exch length 1 sub getinterval } bind def
% stack-arr top-jump filepos
/top-jump { 0 get } bind def

% file next-cmd int
/next-cmd { read not { exit } if } bind def

% - get-char string
/lineedit-buffer 80 string def
/get-char {
  {
    (%lineedit) (r) file
    dup //lineedit-buffer readline pop
    dup length 0 gt {
      exch closefile
      0 1 getinterval
      exit
    } if
    pop
  } loop
} bind def

% Commands array - initialise as no-ops and then add specific commands
% - no-op -
/no-op { } bind def
/bf-ops [ 256 { //no-op } repeat ] def

bf-ops
dup (>) 0 get { /bf-data bf-data 1 add def } bind put
dup (<) 0 get { /bf-data bf-data 1 sub def } bind put
dup (+) 0 get { bf-cells bf-data 2 copy get 1 add put } bind put
dup (-) 0 get { bf-cells bf-data 2 copy get 1 sub put } bind put
dup (.) 0 get { bf-stdout dup bf-cells bf-data get write flushfile } bind put
dup (,) 0 get { bf-cells bf-data bf-stdin read pop put } bind put
dup ([) 0 get {
  bf-cells bf-data get 0 ne {
    /bf-jumps bf-source fileposition bf-jumps push-jump def
  }{
    % Jump to matching ]. Count +1 for [ and -1 for ]. If the count is 0 for a
    % ] it is the matching ] command.
    0 {
      bf-source next-cmd
      dup ([) 0 get eq {
        pop 1 add
      }{
        (]) 0 get eq {
          dup 0 eq {
            pop exit
          } if
          1 sub
        } if
      } ifelse
    } loop
  } ifelse
} bind put
dup (]) 0 get {
  bf-cells bf-data get 0 ne {
    bf-source bf-jumps top-jump setfileposition
  }{
    /bf-jumps bf-jumps pop-jump def
  } ifelse
} bind put
pop

% file bf-init state-dict
/bf-init {
  <<
    % Command bf-source file
    /bf-source 3 -1 roll
    % Input defaults to input via %lineedit
    /bf-stdin //get-char 0 () /SubFileDecode filter
    % Output defaults to stdout
    /bf-stdout (%stdout) (w) file
    % Use array of integer objects for the bf-cells instead of string
    /bf-cells 65535 string
    /bf-data 0
    % Array based stack of jump back file positions
    /bf-jumps 0 array
  >>
} bind def

% state-dict bf-interp -
/bf-interp {
  begin
    { bf-ops bf-source next-cmd get exec } loop
  end
} bind def

% state-dict file bf-set-stdin state-dict
/bf-set-stdin {
  1 index /bf-stdin 3 -1 roll put
} bind def

% state-dict file bf-set-stdout state-dict
/bf-set-stdout {
  1 index /bf-stdout 3 -1 roll put
} bind def

% file bf -
/bf {
  bf-init
  bf-interp
} bind def

% Run Brainfuck program
(prog.bf) (r) file bf
