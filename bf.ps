%!PS

% Implementation of brainfuck interpreter in PostScript

% filepos stack-arr push-jump stack-arr'
/push-jump { [ exch aload pop counttomark 2 add -1 roll ] } bind def
% stack-arr pop-jump filepos stack-arr'
/pop-jump { [ exch aload pop counttomark 1 add 1 roll ] exch } bind def
% file next-cmd int
/next-cmd { read not { exit } if } bind def

% Commands array - initialise as no-ops and then add specific commands

% - no-op -
/no-op { } bind def
/ops [ 256 { //no-op } repeat ] def

ops
dup (>) 0 get { /data data 1 add def } bind put
dup (<) 0 get { /data data 1 sub def } bind put
dup (+) 0 get { cells data 2 copy get 1 add put } bind put
dup (-) 0 get { cells data 2 copy get 1 sub put } bind put
dup (.) 0 get { cells data 1 getinterval =print } bind put
dup (,) 0 get { cells data 3 -1 roll put } bind put
dup ([) 0 get {
    cells data get 0 eq {
      0 {
        source next-cmd
        dup
        ([) 0 get eq {
          pop
          1 add
        }{
          (]) 0 get eq {
            dup 0 eq {
              pop
              exit
            } if
            1 sub
          } if
        } ifelse
      } loop
    }{
      /jumps source fileposition 1 sub jumps push-jump def
    } ifelse
  } bind put
dup (]) 0 get {
    cells data get 0 ne {
      /jumps jumps pop-jump source exch setfileposition def
    } if
  } bind put
pop

% file bf-init state-dict
/bf-init {
  <<
    % Command source file
    /source 3 -1 roll
    % Use array of integer objects for the cells instead of string
    /cells 65535 string
    /data 0
    % Array based stack of jump back file positions
    /jumps 0 array
  >>
} bind def

% state-dict bf-interp -
/bf-interp {
  begin
    { ops source next-cmd get exec } loop
  end
} bind def

% file bf -
/bf {
  bf-init
  bf-interp
} bind def

currentfile bf
+++++ +++++             initialize counter (cell #0) to 10
[                       use loop to set the next four cells to 70/100/30/10
    > +++++ ++              add  7 to cell #1
    > +++++ +++++           add 10 to cell #2
    > +++                   add  3 to cell #3
    > +                     add  1 to cell #4
    <<<< -                  decrement counter (cell #0)
]
> ++ .                  print 'H'
> + .                   print 'e'
+++++ ++ .              print 'l'
.                       print 'l'
+++ .                   print 'o'
> ++ .                  print ' '
<< +++++ +++++ +++++ .  print 'W'
> .                     print 'o'
+++ .                   print 'r'
----- - .               print 'l'
----- --- .             print 'd'
> + .                   print '!'
> .                     print '\n'
