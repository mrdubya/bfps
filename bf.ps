%!PS

% Implementation of brainfuck interpreter in PostScript

/bf-state <<
  % Use array of integer objects for the cells instead of string
  /cells 65535 string def
  /data 0 def

  % Array based stack of jump back file positions
  /jumps [] def
>> def

% filepos stack push-jump stack'
/push-jump {
  [ exch aload pop counttomark 2 add -1 roll ]
} bind def
% stack pop-jump filepos stack'
/pop-jump {
  [ exch aload pop counttomark 1 add 1 roll ]
} bind def

/next-cmd { read not { exit } if } bind def
/no-op { } bind def
/ops [ 256 { //no-op } repeat ] def

ops
dup (>) 0 get { /data data 1 add def } bind put

dup (<) 0 get { /data data 1 sub def } bind put

dup (+) 0 get { cells data 2 copy get 1 add put } bind put

dup (-) 0 get { cells data 2 copy get 1 sub put } bind put

dup (.) 0 get { cells data 1 getinterval =print } bind put

dup (,) 0 get { cells data 3 -1 roll put } bind put

dup ([) 0 get {
    cells data get 0 eq {
      0 {
        1 index next-cmd
        dup
        ([) 0 get eq {
          pop
          1 add
        }{
          (]) 0 get eq {
            dup 0 eq {
              pop
              exit
            } if
            1 sub
          } if
        } ifelse
      } loop
    }{
      dup fileposition 1 sub
      jumps push-jump /jumps exch def
    } ifelse
  } bind put

dup (]) 0 get {
    cells data get 0 ne {
      dup
      jumps pop-jump /jumps exch def
      setfileposition
    } if
  } bind put
pop

% file state bf -
/bf {
  begin
    { ops 1 index next-cmd get exec } loop
    pop
  end
} bind def

currentfile bf-state bf
+++++ +++++             initialize counter (cell #0) to 10
[                       use loop to set the next four cells to 70/100/30/10
    > +++++ ++              add  7 to cell #1
    > +++++ +++++           add 10 to cell #2 
    > +++                   add  3 to cell #3
    > +                     add  1 to cell #4
    <<<< -                  decrement counter (cell #0)
]                   
> ++ .                  print 'H'
> + .                   print 'e'
+++++ ++ .              print 'l'
.                       print 'l'
+++ .                   print 'o'
> ++ .                  print ' '
<< +++++ +++++ +++++ .  print 'W'
> .                     print 'o'
+++ .                   print 'r'
----- - .               print 'l'
----- --- .             print 'd'
> + .                   print '!'
> .                     print '\n'
