%!PS

% Implementation of brainfuck interpreter in PostScript

% Use array of integer objects for the cells instead of string
/cells 65535 string def
/data 0 def

% Array based stack of jump back file positions
/jumps 256 array def
/jump-top -1 def
% filepos push_jump -
/push_jump {
  /jump-top jump-top 1 add def
  jumps jump-top 3 -1 roll put
} bind def
% - pop_jump filepos
/pop_jump {
  jumps jump-top get
  /jump-top jump-top 1 sub def
} bind def

/no-op {} bind def
/ops << 0 1 255 { //no-op } for >> def

ops begin
  (>) 0 get { /data data 1 add def } bind def

  (<) 0 get { /data data 1 sub def } bind def

  (+) 0 get { cells data 2 copy get 1 add put } bind def

  (-) 0 get { cells data 2 copy get 1 sub put } bind def

  (.) 0 get { cells data 1 getinterval =print } bind def

  (,) 0 get { cells data 3 -1 roll put } bind def

  ([) 0 get {
    cells data get 0 eq {
      0 {
        1 index 
        read not { pop exit } if
        dup
        ([) 0 get eq {
          pop
          1 add
        }{
          (]) 0 get eq {
            dup 0 eq {
              pop
              exit
            } if
            1 sub
          } if
        } ifelse
      } loop
    }{
      dup fileposition 1 sub push_jump
    } ifelse
  } bind def

  (]) 0 get {
    cells data get 0 ne {
      dup pop_jump setfileposition
    } if
  } bind def
end

% file bf -
/bf {
  {
    dup read not { pop exit } if
    ops exch get exec
  } loop
} bind def

currentfile bf
+++++ +++++             initialize counter (cell #0) to 10
[                       use loop to set the next four cells to 70/100/30/10
    > +++++ ++              add  7 to cell #1
    > +++++ +++++           add 10 to cell #2 
    > +++                   add  3 to cell #3
    > +                     add  1 to cell #4
    <<<< -                  decrement counter (cell #0)
]                   
> ++ .                  print 'H'
> + .                   print 'e'
+++++ ++ .              print 'l'
.                       print 'l'
+++ .                   print 'o'
> ++ .                  print ' '
<< +++++ +++++ +++++ .  print 'W'
> .                     print 'o'
+++ .                   print 'r'
----- - .               print 'l'
----- --- .             print 'd'
> + .                   print '!'
> .                     print '\n'
